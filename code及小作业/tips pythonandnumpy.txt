nums2 = [x**2 for x in nums] #if x > 0 会把0筛掉

#对numpy的数组进行切片，并不会在内存中构造新数组，所以对切片后的"新"数组改动会造成原数组的数据一起变动！切记！

import numpy as np
a = np.array([[1,2], [3, 4], [5, 6]])
print(a[[0,1,2],[0,1,0]]) #批量访问数组a中特定元素的方法

array_reshape = np.reshape(np.array,[m,n]) #reshape并不会改变原来np.array的形状

x = np.array([1,2,3])
x = np.array([[1,2,3]])
#二者的shape不一致！
#关注np.array的shape对debug有很重要的意义

broadcasting:
广播的规则:

让所有输入数组(这里的数组是np.array的意思，而非数学上的数组！)都向其中形状最长的数组看齐，形状中不足的部分都通过在前面加 1 补齐。#注意是在维数小的np.array的前面补上维度，而非在其后面补上维度！
输出数组的形状是输入数组形状的各个维度上的最大值。
如果输入数组的某个维度和输出数组的对应维度的长度相同或者其长度为 1 时，这个数组能够用来计算，否则出错。
当输入数组的某个维度的长度为 1 时，沿着此维度运算时都用此维度上的第一组值。

简单理解：对两个数组，分别比较他们的每一个维度（若其中一个数组没有当前维度则忽略），满足：
数组拥有相同形状。
当前维度的值相等。
当前维度的值有一个是 1。
若条件不满足，抛出 "ValueError: frames are not aligned" 异常。

python3中，range(3)是一个迭代器,而非list

#np.max(np.array)
#np.argmax(np.array)
#Note the axis you apply the operation will have its dimension removed from the shape. This is useful to keep in mind when you're trying to figure out what axis corresponds to what.

fancy indexing

>>>X = np.arange(12).reshape((3,4))
>>>X
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
>>>row = np.array([0, 1, 2])
>>>col = np.array([2, 1, 3])
>>>X[row,col]
array([2, 5, 11]) #第一个元素2代表X[0, 2]
# 在索引中将列向量和行向量结合可以得到二维结果
>>>X[row[:, np.newaxis], col] # 行向量中的每个值与每个列向量配对（用了numpy的broadcasting）
array([[ 2,  1,  3],
       [ 6,  5,  7],
       [10,  9, 11]])

Unlike a copy, in a view of an array, the data is shared between the view and the array. Sometimes, our results are copies of arrays, but other times they can be views.
 Understanding when each is generated is important to avoid any unforeseen issues.
Views can be created from a slice of an array, changing the dtype of the same data area (using arr.view(dtype), not the result of arr.astype(dtype)), or even both.

However, if we use fancy indexing, the result will actually be a copy and not a view:
指的是向np.array[?]中传入list(int或者是boolean)的代码，fancy indexing会制造一个副本


Summary¶
1.NumPy is an incredibly powerful library for computation providing both massive efficiency gains and convenience.
2.Vectorize! Orders of magnitude faster.
3.Keeping track of the shape of your arrays is often useful.
4.Many useful math functions and operations built into NumPy.
5.Select and manipulate arbitrary pieces of data with powerful indexing schemes.
6.Broadcasting allows for computation across arrays of different shapes.
7.Watch out for views vs. copies.